-- Note: Using organization_usage schema for ORG 2.0 Views
DECLARE
RES1 RESULTSET;
RES2 RESULTSET;
RES3 RESULTSET;


BEGIN
   --UPDATE MODEL DATA:
   RES1 := (
           EXECUTE IMMEDIATE $$ CREATE
               OR REPLACE SNOWFLAKE.ML.FORECAST STORAGE_FORECAST_MODEL (
               INPUT_DATA => SYSTEM$QUERY_REFERENCE('SELECT USAGE_DATE::TIMESTAMP_NTZ AS USAGE_DATE
   , (STORAGE_BYTES+STAGE_BYTES+FAILSAFE_BYTES+HYBRID_TABLE_STORAGE_BYTES)/POWER(1024,3)::FLOAT AS STORAGE_GB
FROM SNOWFLAKE.ORGANIZATION_USAGE.STORAGE_USAGE
WHERE USAGE_DATE > CURRENT_DATE()-60
AND USAGE_DATE < CURRENT_DATE()
'),
               TIMESTAMP_COLNAME => 'USAGE_DATE',
               TARGET_COLNAME => 'STORAGE_GB'
               );$$
           );


   CALL STORAGE_FORECAST_MODEL ! FORECAST(FORECASTING_PERIODS => 60, CONFIG_OBJECT => { 'PREDICTION_INTERVAL' : 0.9 });


   --RES2 := (EXECUTE IMMEDIATE 'SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))');
   --COMBINE YOUR ACTUAL DATA WITH THE FORECASTED DATA:
   RES3 := (
           EXECUTE IMMEDIATE $$
           SELECT
            ACCOUNT_LOCATOR
            , ACCOUNT_NAME
            , USAGE_DATE::TIMESTAMP_NTZ AS USAGE_DATE
            , (STORAGE_BYTES + STAGE_BYTES + FAILSAFE_BYTES + HYBRID_TABLE_STORAGE_BYTES) / POWER(1024, 3)::FLOAT AS STORAGE_GB
            , NULL AS FORECAST
            , NULL AS LOWER_BOUND
            , NULL AS UPPER_BOUND
           FROM SNOWFLAKE.ORGANIZATION_USAGE.STORAGE_USAGE
           WHERE USAGE_DATE > CURRENT_DATE () - 31
               AND USAGE_DATE < CURRENT_DATE ()

           UNION ALL

           SELECT
            ACCOUNT_LOCATOR
            , ACCOUNT_NAME
            , TS
            , NULL AS ACTUAL
            , FORECAST
            , LOWER_BOUND
            , UPPER_BOUND
           FROM TABLE (RESULT_SCAN(LAST_QUERY_ID())) $$
           );


   RETURN TABLE (RES3);
END;
