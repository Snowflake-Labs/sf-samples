USE ROLE <% ctx.env.finops_db_admin_role%>;
USE DATABASE <% ctx.env.finops_acct_db %>;
USE SCHEMA <% ctx.env.finops_acct_schema %>;
CREATE OR REPLACE VIEW COMPUTE_AND_QAS_CC_AVG_PER_QUERY_CURRENCY_DAY COMMENT = 'Title: Compute & Query Acceleration Service (QAS) Currency Average Per Query and Cost Center by Day. Description: Analyze the major costs incurred in Snowflake Compute use with average cost per query for each cost center. Does not account for extra cloud services fees above the 10% threshold.'
as

WITH mr
AS (
  -- Retrieve metering rates per date
   SELECT MAX(EFFECTIVE_RATE) AS METERING_RATE, DATE
   FROM SNOWFLAKE.ORGANIZATION_USAGE.RATE_SHEET_DAILY RS
   WHERE SERVICE_TYPE = 'WAREHOUSE_METERING'
       AND IS_ADJUSTMENT = FALSE
       AND ACCOUNT_LOCATOR = CURRENT_ACCOUNT()
       AND RS.DATE > (
           SELECT MIN(START_DATE)
           FROM SNOWFLAKE.ORGANIZATION_USAGE.CONTRACT_ITEMS
           WHERE START_DATE <= CURRENT_DATE()
            AND CONTRACT_ITEM IN ('Capacity', 'Additional Capacity')
            AND NVL(EXPIRATION_DATE, '2999-01-01') > END_DATE
           )
    GROUP BY DATE
   )
SELECT
   DATE_TRUNC('DAY', SF.ADJUSTED_START_TIME)::DATE AS DAY
   , GET_TAG_COST_CENTER(SF.QUERY_TAG, SF.USER_NAME, TU.TAG_VALUE, SF.ROLE_NAME, TR.TAG_VALUE, TS.TAG_VALUE, TW.TAG_VALUE) AS COST_CENTER
   , COUNT(*) AS QUERY_COUNT
   , ROUND(SUM(ALLOCATED_CREDITS_USED_COMPUTE + ZEROIFNULL(ALLOCATED_CREDITS_USED_QAS) * MR.METERING_RATE), 2) AS COMPUTE_CURRENCY  -- Total Warehouse cost in respective currency for this day.
   , ROUND(COMPUTE_CURRENCY/QUERY_COUNT,2) AS COST_PER_QUERY_DAILY_AVG
FROM SF_CREDITS_BY_QUERY SF -- Generated by cost per query procedure
JOIN mr ON mr.date = Day
LEFT JOIN SNOWFLAKE.ACCOUNT_USAGE.TAG_REFERENCES tr ON tr.object_name = sf.role_name
  AND tr.TAG_NAME = '<% ctx.env.finops_tag_name %>'
  AND tr.DOMAIN = 'ROLE'
  AND sf.user_name <> 'SYSTEM' -- Exclude Tasks that will be attributed to schema instead of Access Roles that are not tagged.
--Schema Snowflake Tasks
LEFT JOIN SNOWFLAKE.ACCOUNT_USAGE.TAG_REFERENCES ts ON ts.object_database = sf.database_name
  AND ts.object_name = sf.schema_name
  AND ts.TAG_NAME = '<% ctx.env.finops_tag_name %>'
  AND ts.DOMAIN = 'SCHEMA'
  AND sf.user_name = 'SYSTEM'
--User overrides
LEFT JOIN SNOWFLAKE.ACCOUNT_USAGE.TAG_REFERENCES tu ON tu.object_name = sf.user_name
  AND tu.TAG_NAME = '<% ctx.env.finops_tag_name %>'
  AND tu.DOMAIN = 'USER'
--Warehouse fallback if nothing else tagged.
LEFT JOIN SNOWFLAKE.ACCOUNT_USAGE.TAG_REFERENCES tw ON tw.object_id = sf.warehouse_id
  AND tw.TAG_NAME = '<% ctx.env.finops_tag_name %>'
  AND tw.DOMAIN = 'WAREHOUSE'
GROUP BY ALL
HAVING COMPUTE_CURRENCY > 0;
