-------------------------------------------------
-- NAME:	 PERF-IS-24-request-concurrency.txt
-------------------------------------------------
-- DESCRIPTION:
--	For a narrow timeframe, typically one hour, calculates concurrency of requests at 
--	the second level
--
-- OUTPUT:
--	Understand the volume of requests running concurrently
--
-- NEXT STEPS:
--	Further analyze concurrency to understand full impact
--	Address throughput (SQL & Cluster Keys)
--	Address throughput (scale up… vWH sizing)
--	Address concurrency (scale out…increase clusters)
--
-- REVISION HISTORY
-- DATE		INIT	DESCRIPTION
----------  ----    -----------
-- 18JAN22	WNA		created/updated for repository
-------------------------------------------------
	
------------------------------------------------------------------------
-- First, look at statement types within XP and GS
------------------------------------------------------------------------
SELECT	case when WAREHOUSE_NAME is null then 'GS' else WAREHOUSE_NAME END AS WAREHOUSE_NAME, 
        QUERY_TYPE,
count(*)
FROM	
	TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY(
		END_TIME_RANGE_START=>dateadd('day',-6,CURRENT_TIMESTAMP()),
		END_TIME_RANGE_END=>CURRENT_TIMESTAMP()))
GROUP	BY 1,2
order by 2 desc,1;


------------------------------------------------------------------------
-- Count of concurrency levels by second, at the workload level
------------------------------------------------------------------------
SELECT	M.LOGDATE
    ,X.PIT
--	,X.HHH
--	,X.MMI    
--	,X.SSE
	,M.WAREHOUSE_NAME
	,COUNT(*) AS CONCURRENTQUERIES    
FROM     
(
SELECT	CAST(START_TIME AS DATE) LOGDATE,
		case when WAREHOUSE_NAME is null then 'GS' else WAREHOUSE_NAME END AS WAREHOUSE_NAME, 
--        S.STATEMENT_TYPE,
		CAST((EXTRACT(HOUR FROM START_TIME)) *3600 
			+ (EXTRACT(MINUTE FROM START_TIME)) *60 
			+ (EXTRACT(SECOND FROM START_TIME) ) AS DEC(8,2)) AS STARTSECS,
		CAST(EXTRACT(HOUR FROM END_TIME)*3600
			+ EXTRACT(MINUTE FROM END_TIME)*60 
			+ EXTRACT(SECOND FROM END_TIME) AS DEC(8,2)) AS ENDSECS 
FROM
	TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY(
		END_TIME_RANGE_START=>dateadd('day',-6,CURRENT_TIMESTAMP()),
		END_TIME_RANGE_END=>CURRENT_TIMESTAMP()))
GROUP	BY 1,2,3,4--,5
HAVING	ENDSECS-STARTSECS >= 0
) M 
CROSS JOIN
(
select 
--   to_timestamp(therange),
    (hour(to_timestamp(therange))*3600)+
    (minute(to_timestamp(therange))*60)+
    second(to_timestamp(therange)) 	PIT,
    (hour(to_timestamp(therange))*3600) AS HHH,
    (minute(to_timestamp(therange))*60) AS MMI,
    second(to_timestamp(therange)) AS SSE
from
(SELECT ones.n + 10*tens.n + 100*hunds.n + 1000*thous.n + 10000*tenthou.n + 100000*hunthou.n + 1000000*mill.n + 10000000*tenmill.n + 100000000*hunmill.n + 1000000000*billion.n as therange
FROM (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) ones(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) tens(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) hunds(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) thous(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) tenthou(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) hunthou(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) mill(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) tenmill(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) hunmill(n),
     (VALUES(0),(1)) billion(n)
having therange between cast(extract(EPOCH_SECOND from to_timestamp($ts_start)) as integer) 
 and cast(extract(EPOCH_SECOND from to_timestamp($ts_end)) as integer))
) X 
WHERE	M.STARTSECS <= X.PIT 
AND	M.ENDSECS > X.PIT                            
GROUP	BY 1,2,3
order by 3,2;
------------------------------------------------------------------------
-- Count of different instances of concurrency levels, at the final workload level
-- Crosstab query, Shortens up the results considerably, but adds unecessary columns
------------------------------------------------------------------------
SELECT	LOGDATE,
	PIT,
	WAREHOUSE_NAME,
	SUM(CASE WHEN CONCURRENTQUERIES = 1 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_1,
	SUM(CASE WHEN CONCURRENTQUERIES = 2 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_2,
	SUM(CASE WHEN CONCURRENTQUERIES = 3 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_3,
	SUM(CASE WHEN CONCURRENTQUERIES = 4 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_4,
	SUM(CASE WHEN CONCURRENTQUERIES = 5 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_5,
	SUM(CASE WHEN CONCURRENTQUERIES = 6 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_6,
	SUM(CASE WHEN CONCURRENTQUERIES = 7 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_7,
	SUM(CASE WHEN CONCURRENTQUERIES = 8 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_8,
	SUM(CASE WHEN CONCURRENTQUERIES = 9 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_9,
	SUM(CASE WHEN CONCURRENTQUERIES = 10 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_10,
	SUM(CASE WHEN CONCURRENTQUERIES = 11 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_11,
	SUM(CASE WHEN CONCURRENTQUERIES = 12 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_12,
	SUM(CASE WHEN CONCURRENTQUERIES = 13 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_13,
	SUM(CASE WHEN CONCURRENTQUERIES = 14 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_14,
	SUM(CASE WHEN CONCURRENTQUERIES = 15 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_15,
	SUM(CASE WHEN CONCURRENTQUERIES = 16 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_16,
	SUM(CASE WHEN CONCURRENTQUERIES = 17 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_17,
	SUM(CASE WHEN CONCURRENTQUERIES = 18 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_18,
	SUM(CASE WHEN CONCURRENTQUERIES = 19 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_19,
	SUM(CASE WHEN CONCURRENTQUERIES = 20 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_20,
	SUM(CASE WHEN CONCURRENTQUERIES = 21 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_21,
	SUM(CASE WHEN CONCURRENTQUERIES = 22 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_22,
	SUM(CASE WHEN CONCURRENTQUERIES = 23 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_23,
	SUM(CASE WHEN CONCURRENTQUERIES = 24 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_24,
	SUM(CASE WHEN CONCURRENTQUERIES = 25 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_25,
	SUM(CASE WHEN CONCURRENTQUERIES = 26 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_26,
	SUM(CASE WHEN CONCURRENTQUERIES = 27 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_27,
	SUM(CASE WHEN CONCURRENTQUERIES = 28 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_28,
	SUM(CASE WHEN CONCURRENTQUERIES = 29 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_29,
	SUM(CASE WHEN CONCURRENTQUERIES = 30 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_30,
	SUM(CASE WHEN CONCURRENTQUERIES = 31 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_31,
	SUM(CASE WHEN CONCURRENTQUERIES = 32 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_32,
	SUM(CASE WHEN CONCURRENTQUERIES = 33 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_33,
	SUM(CASE WHEN CONCURRENTQUERIES = 34 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_34,
	SUM(CASE WHEN CONCURRENTQUERIES = 35 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_35,
	SUM(CASE WHEN CONCURRENTQUERIES = 36 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_36,
	SUM(CASE WHEN CONCURRENTQUERIES = 37 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_37,
	SUM(CASE WHEN CONCURRENTQUERIES = 38 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_38,
	SUM(CASE WHEN CONCURRENTQUERIES = 39 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_39,
	SUM(CASE WHEN CONCURRENTQUERIES = 40 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_40,
	
	SUM(CASE WHEN CONCURRENTQUERIES = 41 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_41,
	SUM(CASE WHEN CONCURRENTQUERIES = 42 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_42,
	SUM(CASE WHEN CONCURRENTQUERIES = 43 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_43,
	SUM(CASE WHEN CONCURRENTQUERIES = 44 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_44,
	SUM(CASE WHEN CONCURRENTQUERIES = 45 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_45,
	SUM(CASE WHEN CONCURRENTQUERIES = 46 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_46,
	SUM(CASE WHEN CONCURRENTQUERIES = 47 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_47,
	SUM(CASE WHEN CONCURRENTQUERIES = 48 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_48,
	SUM(CASE WHEN CONCURRENTQUERIES = 49 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_49,
	SUM(CASE WHEN CONCURRENTQUERIES = 50 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_50,
	SUM(CASE WHEN CONCURRENTQUERIES = 51 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_51,
	SUM(CASE WHEN CONCURRENTQUERIES = 52 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_52,
	SUM(CASE WHEN CONCURRENTQUERIES = 53 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_53,
	SUM(CASE WHEN CONCURRENTQUERIES = 54 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_54,
	SUM(CASE WHEN CONCURRENTQUERIES = 55 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_55,
	SUM(CASE WHEN CONCURRENTQUERIES = 56 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_56,
	SUM(CASE WHEN CONCURRENTQUERIES = 57 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_57,
	SUM(CASE WHEN CONCURRENTQUERIES = 58 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_58,
	SUM(CASE WHEN CONCURRENTQUERIES = 59 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_59,
	SUM(CASE WHEN CONCURRENTQUERIES = 60 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_60,
	SUM(CASE WHEN CONCURRENTQUERIES = 61 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_61,
	SUM(CASE WHEN CONCURRENTQUERIES = 62 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_62,
	SUM(CASE WHEN CONCURRENTQUERIES = 63 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_63,
	SUM(CASE WHEN CONCURRENTQUERIES = 64 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_64,
	SUM(CASE WHEN CONCURRENTQUERIES = 65 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_65,
	SUM(CASE WHEN CONCURRENTQUERIES = 66 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_66,
	SUM(CASE WHEN CONCURRENTQUERIES = 67 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_67,
	SUM(CASE WHEN CONCURRENTQUERIES = 68 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_68,
	SUM(CASE WHEN CONCURRENTQUERIES = 69 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_69,
	SUM(CASE WHEN CONCURRENTQUERIES = 70 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_70,
	SUM(CASE WHEN CONCURRENTQUERIES = 71 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_71,
	SUM(CASE WHEN CONCURRENTQUERIES = 72 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_72,
	SUM(CASE WHEN CONCURRENTQUERIES = 73 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_73,
	SUM(CASE WHEN CONCURRENTQUERIES = 74 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_74,
	SUM(CASE WHEN CONCURRENTQUERIES = 75 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_75,
	SUM(CASE WHEN CONCURRENTQUERIES = 76 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_76,
	SUM(CASE WHEN CONCURRENTQUERIES = 77 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_77,
	SUM(CASE WHEN CONCURRENTQUERIES = 78 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_78,
	SUM(CASE WHEN CONCURRENTQUERIES = 79 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_79,
	SUM(CASE WHEN CONCURRENTQUERIES = 80 THEN CONCURRENTQUERIES ELSE 0 END) AS CON_80
FROM
(
SELECT	M.LOGDATE
    ,X.PIT
	,X.HHH
	,X.MMI    
	,X.SSE
	,M.WAREHOUSE_NAME
	,COUNT(*) AS CONCURRENTQUERIES    
FROM     
(
SELECT	CAST(START_TIME AS DATE) LOGDATE,
		case when WAREHOUSE_NAME is null then 'GS' else WAREHOUSE_NAME END AS WAREHOUSE_NAME, 
--        S.STATEMENT_TYPE,
		CAST((EXTRACT(HOUR FROM START_TIME)) *3600 
			+ (EXTRACT(MINUTE FROM START_TIME)) *60 
			+ (EXTRACT(SECOND FROM START_TIME) ) AS DEC(8,2)) AS STARTSECS,
		CAST(EXTRACT(HOUR FROM END_TIME)*3600
			+ EXTRACT(MINUTE FROM END_TIME)*60 
			+ EXTRACT(SECOND FROM END_TIME) AS DEC(8,2)) AS ENDSECS 
FROM	
	TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY(
		END_TIME_RANGE_START=>dateadd('day',-6,CURRENT_TIMESTAMP()),
		END_TIME_RANGE_END=>CURRENT_TIMESTAMP()))
GROUP	BY 1,2,3,4--,5
HAVING	ENDSECS-STARTSECS >= 0
) M 
CROSS JOIN
(
select 
--   to_timestamp(therange),
    (hour(to_timestamp(therange))*3600)+
    (minute(to_timestamp(therange))*60)+
    second(to_timestamp(therange)) 	PIT,
    (hour(to_timestamp(therange))*3600) AS HHH,
    (minute(to_timestamp(therange))*60) AS MMI,
    second(to_timestamp(therange)) AS SSE
from
(SELECT ones.n + 10*tens.n + 100*hunds.n + 1000*thous.n + 10000*tenthou.n + 100000*hunthou.n + 1000000*mill.n + 10000000*tenmill.n + 100000000*hunmill.n + 1000000000*billion.n as therange
FROM (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) ones(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) tens(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) hunds(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) thous(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) tenthou(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) hunthou(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) mill(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) tenmill(n),
     (VALUES(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)) hunmill(n),
     (VALUES(0),(1)) billion(n)
having therange between cast(extract(EPOCH_SECOND from to_timestamp($ts_start)) as integer) 
 and cast(extract(EPOCH_SECOND from to_timestamp($ts_end)) as integer))
) X 
WHERE	M.STARTSECS <= X.PIT 
AND	M.ENDSECS > X.PIT                            
GROUP	BY 1,2,3,4,5,6
) FINAL (LOGDATE,PIT,HHH,MMI,SSE,WAREHOUSE_NAME,CONCURRENTQUERIES)
GROUP	BY 1,2,3
ORDER	BY 1,2,3
; 

